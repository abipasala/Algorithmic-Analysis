# -*- coding: utf-8 -*-
"""AA_Lab3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w7hnSPMj71qCzOxGwu7nsdTyzqV-D2pa
"""

from collections import defaultdict

class Graph:
    def __init__(self, vertices):
        self.graph = defaultdict(list)
        self.V = vertices

    def add_edge(self, u, v):
        self.graph[u].append(v)

    def topological_sort_util(self, v, visited, stack):
        visited[v] = True
        for neighbour in self.graph[v]:
            if not visited[neighbour]:
                self.topological_sort_util(neighbour, visited, stack)
        stack.append(v)

    def topological_sort(self):
        visited = [False] * self.V
        stack = []
        for i in range(self.V):
            if not visited[i]:
                self.topological_sort_util(i, visited, stack)
        stack.reverse()
        return stack


# Example usage
g = Graph(6)
g.add_edge(5, 2)
g.add_edge(5, 0)
g.add_edge(4, 0)
g.add_edge(4, 1)
g.add_edge(2, 3)
g.add_edge(3, 1)

print("Topological Sort (DFS-based):", g.topological_sort())

from collections import defaultdict, deque

class GraphKahn:
    def __init__(self, vertices):
        self.graph = defaultdict(list)
        self.V = vertices

    def add_edge(self, u, v):
        self.graph[u].append(v)

    def topological_sort_kahn(self):
        indegree = [0] * self.V

        # Compute indegree
        for u in self.graph:
            for v in self.graph[u]:
                indegree[v] += 1

        # Collect nodes with indegree 0
        queue = deque([i for i in range(self.V) if indegree[i] == 0])
        topo_order = []

        while queue:
            u = queue.popleft()
            topo_order.append(u)

            # Decrease indegree of neighbors
            for v in self.graph[u]:
                indegree[v] -= 1
                if indegree[v] == 0:
                    queue.append(v)

        # Check for cycle
        if len(topo_order) != self.V:
            return "Graph has a cycle! Topological sort not possible."
        return topo_order


# Example usage
gk = GraphKahn(6)
gk.add_edge(5, 2)
gk.add_edge(5, 0)
gk.add_edge(4, 0)
gk.add_edge(4, 1)
gk.add_edge(2, 3)
gk.add_edge(3, 1)

print("Topological Sort (Kahnâ€™s Algorithm):", gk.topological_sort_kahn())